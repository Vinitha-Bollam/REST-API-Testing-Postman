{
	"info": {
		"_postman_id": "147dacad-4790-4811-845e-8bf27fd7d219",
		"name": "HerokuBookings_DataDrivenTest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21159613"
	},
	"item": [
		{
			"name": "HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify response status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Verify response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verify response payload\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking}}/ping",
					"host": [
						"{{booking}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // Storing response in variable\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains firstname attribute\r",
							"pm.test(\"Response has Firstname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"//Verify response body contains lastname attribute\r",
							"pm.test(\"Response has Lastname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
							"});\r",
							"\r",
							"//Verify the firstname of the booking \r",
							"pm.test(\"Firstname of the booking\", function () {\r",
							"    pm.expect(jsonData.booking.firstname).to.eql(pm.iterationData.get(\"firstname\"));\r",
							"});\r",
							"\r",
							"//Verify the lastname of the booking \r",
							"pm.test(\"Lastname of the booking\", function () {\r",
							"    pm.expect(jsonData.booking.lastname).to.eql(pm.iterationData.get(\"lastname\"));\r",
							"});\r",
							"\r",
							"//Verify booking response payload header\r",
							"pm.test(\"Response payload header has Content Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verifying the total price of the booking\r",
							"pm.test(\"Totalprice of Booking\", function () {\r",
							"   pm.expect(jsonData.booking.totalprice).to.eql(pm.iterationData.get(\"totalprice\"));\r",
							"});\r",
							"\r",
							"//Verifying the deposit paid or not\r",
							"pm.test(\"Depositpaid\", function () {\r",
							"   // pm.expect(jsonData.booking.depositpaid).to.eql(pm.iterationData.get(depositpaid));\r",
							"   pm.expect(jsonData.booking.depositpaid).to.eql(true)\r",
							"});\r",
							"\r",
							"//Verifying the checkin date of the booking\r",
							"pm.test(\"Bookingdates - Checkin\", function () {\r",
							"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(pm.iterationData.get(\"checkin\"))\r",
							"});\r",
							"\r",
							"//Verify the checkout date of the booking\r",
							"pm.test(\"Bookingdates - Checkout\", function () {\r",
							"  //  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(pm.iterationData.get(\"checkout\"))\r",
							"});\r",
							"\r",
							"//Verifying the additional needs for the booking\r",
							"pm.test(\"Additionalneeds for booking\", function () {\r",
							"    pm.expect(jsonData.booking.additionalneeds).to.eql(pm.iterationData.get(\"additionalneeds\"));\r",
							"});\r",
							"\r",
							"//Declaring the bookingid as global variable to reuse in the other requests\r",
							"pm.globals.set(\"bookingid\", jsonData.bookingid);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" : \"{{totalprice}}\",\r\n    \"depositpaid\" : \"{{depositpaid}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking}}/booking",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // Storing response in variable\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains firstname attribute\r",
							"pm.test(\"Response has Firstname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"//Verify response body contains lastname attribute\r",
							"pm.test(\"Response has Lastname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
							"});\r",
							"\r",
							"//Verify the firstname of the booking \r",
							"pm.test(\"Firstname of the booking\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.iterationData.get(\"firstname\"));\r",
							"});\r",
							"\r",
							"//Verify the lastname of the booking \r",
							"pm.test(\"Lastname of the booking\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.iterationData.get(\"lastname\"));\r",
							"});\r",
							"\r",
							"//Verify booking response payload header\r",
							"pm.test(\"Response payload header has Content Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verifying the total price of the booking\r",
							"pm.test(\"Totalprice of Booking\", function () {\r",
							"   pm.expect(jsonData.totalprice).to.eql(pm.iterationData.get(\"totalprice\"));\r",
							"});\r",
							"\r",
							"//Verifying the deposit paid or not\r",
							"pm.test(\"Depositpaid\", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"\r",
							"//Verifying the checkin date of the booking\r",
							"pm.test(\"Bookingdates - Checkin\", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.iterationData.get(\"checkin\"))\r",
							"});\r",
							"\r",
							"//Verify the checkout date of the booking\r",
							"pm.test(\"Bookingdates - Checkout\", function () {\r",
							"  //  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.iterationData.get(\"checkout\"))\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking}}/booking/{{bookingid}}",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"     //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							" \r",
							" //Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains token attribute\r",
							"pm.test(\"Response has token attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							" ////Declaring the token as global variable to reuse in the put and patch requests\r",
							" var jsonData = pm.response.json();\r",
							"pm.globals.set(\"token\", jsonData.token);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking}}/auth",
					"host": [
						"{{booking}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // Storing response in variable\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains firstname attribute\r",
							"pm.test(\"Response has Firstname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"//Verify response body contains lastname attribute\r",
							"pm.test(\"Response has Lastname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
							"});\r",
							"\r",
							"//Verify the firstname of the booking \r",
							"pm.test(\"Firstname of the booking\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.iterationData.get(\"updatefirstname\"));\r",
							"});\r",
							"\r",
							"//Verify the lastname of the booking \r",
							"pm.test(\"Lastname of the booking\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.iterationData.get(\"updatelastname\"));\r",
							"});\r",
							"\r",
							"//Verify booking response payload header\r",
							"pm.test(\"Response payload header has Content Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verifying the total price of the booking\r",
							"pm.test(\"Totalprice of Booking\", function () {\r",
							"   pm.expect(jsonData.totalprice).to.eql(pm.iterationData.get(\"updatetotalprice\"));\r",
							"});\r",
							"\r",
							"//Verifying the deposit paid or not\r",
							"pm.test(\"Depositpaid\", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"\r",
							"//Verifying the checkin date of the booking\r",
							"pm.test(\"Bookingdates - Checkin\", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.iterationData.get(\"updatecheckin\"))\r",
							"});\r",
							"\r",
							"//Verify the checkout date of the booking\r",
							"pm.test(\"Bookingdates - Checkout\", function () {\r",
							"  //  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.iterationData.get(\"updatecheckout\"))\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\n    \"firstname\" : \"{{updatefirstname}}\",\n    \"lastname\" : \"{{updatelastname}}\",\n    \"totalprice\" : \"{{updatetotalprice}}\",\n    \"depositpaid\" : \"{{updatedepositpaid}}\",\n    \"bookingdates\" : {\n        \"checkin\" : \"{{updatecheckin}}\",\n        \"checkout\" : \"{{updatecheckout}}\"\n    },\n    \"additionalneeds\" : \"{{updateadditionalneeds}}\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{booking}}/booking/{{bookingid}}",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // Storing response in variable\r",
							"    var jsonData = pm.response.json();\r",
							"    //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains firstname attribute\r",
							"pm.test(\"Response has Firstname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"//Verify response body contains lastname attribute\r",
							"pm.test(\"Response has Lastname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
							"});\r",
							"\r",
							"//Verify the firstname of the booking \r",
							"pm.test(\"Firstname of the booking\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.iterationData.get(\"updatefirstname\"));\r",
							"});\r",
							"\r",
							"//Verify the lastname of the booking \r",
							"pm.test(\"Lastname of the booking\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.iterationData.get(\"updatelastname\"));\r",
							"});\r",
							"\r",
							"//Verify booking response payload header\r",
							"pm.test(\"Response payload header has Content Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verifying the total price of the booking\r",
							"pm.test(\"Totalprice of Booking\", function () {\r",
							"   pm.expect(jsonData.totalprice).to.eql(pm.iterationData.get(\"updatetotalprice\"));\r",
							"});\r",
							"\r",
							"//Verifying the deposit paid or not\r",
							"pm.test(\"Depositpaid\", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"\r",
							"//Verifying the checkin date of the booking\r",
							"pm.test(\"Bookingdates - Checkin\", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.iterationData.get(\"updatecheckin\"))\r",
							"});\r",
							"\r",
							"//Verify the checkout date of the booking\r",
							"pm.test(\"Bookingdates - Checkout\", function () {\r",
							"  //  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.iterationData.get(\"updatecheckout\"))\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking}}/booking/{{bookingid}}",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Partial Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // Storing response in variable\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains firstname attribute\r",
							"pm.test(\"Response has Firstname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"//Verify response body contains lastname attribute\r",
							"pm.test(\"Response has Lastname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
							"});\r",
							"\r",
							"//Verify the firstname of the booking \r",
							"pm.test(\"Firstname of the booking\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.iterationData.get(\"partialupdatefirstname\"));\r",
							"});\r",
							"\r",
							"//Verify the lastname of the booking \r",
							"pm.test(\"Lastname of the booking\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.iterationData.get(\"partialupdatelastname\"));\r",
							"});\r",
							"\r",
							"//Verify booking response payload header\r",
							"pm.test(\"Response payload header has Content Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verifying the total price of the booking\r",
							"pm.test(\"Totalprice of Booking\", function () {\r",
							"   pm.expect(jsonData.totalprice).to.eql(pm.iterationData.get(\"updatetotalprice\"));\r",
							"});\r",
							"\r",
							"//Verifying the deposit paid or not\r",
							"pm.test(\"Depositpaid\", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"\r",
							"//Verifying the checkin date of the booking\r",
							"pm.test(\"Bookingdates - Checkin\", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.iterationData.get(\"updatecheckin\"))\r",
							"});\r",
							"\r",
							"//Verify the checkout date of the booking\r",
							"pm.test(\"Bookingdates - Checkout\", function () {\r",
							"  //  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.iterationData.get(\"updatecheckout\"))\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{partialupdatefirstname}}\",\n    \"lastname\" : \"{{partialupdatelastname}}\"\n}"
				},
				"url": {
					"raw": "{{booking}}/booking/{{bookingid}}",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    // Storing response in variable\r",
							"    var jsonData = pm.response.json();\r",
							"\r",
							"    //Verify status code is 200\r",
							"pm.test(\"Response Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify response body contains firstname attribute\r",
							"pm.test(\"Response has Firstname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"firstname\");\r",
							"});\r",
							"\r",
							"//Verify response body contains lastname attribute\r",
							"pm.test(\"Response has Lastname attribute\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"lastname\");\r",
							"});\r",
							"\r",
							"//Verify the firstname of the booking \r",
							"pm.test(\"Firstname of the booking\", function () {\r",
							"    pm.expect(jsonData.firstname).to.eql(pm.iterationData.get(\"partialupdatefirstname\"));\r",
							"});\r",
							"\r",
							"//Verify the lastname of the booking \r",
							"pm.test(\"Lastname of the booking\", function () {\r",
							"    pm.expect(jsonData.lastname).to.eql(pm.iterationData.get(\"partialupdatelastname\"));\r",
							"});\r",
							"\r",
							"//Verify booking response payload header\r",
							"pm.test(\"Response payload header has Content Type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verifying the response time to be less than 200ms\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verifying the total price of the booking\r",
							"pm.test(\"Totalprice of Booking\", function () {\r",
							"   pm.expect(jsonData.totalprice).to.eql(pm.iterationData.get(\"updatetotalprice\"));\r",
							"});\r",
							"\r",
							"//Verifying the deposit paid or not\r",
							"pm.test(\"Depositpaid\", function () {\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"});\r",
							"\r",
							"//Verifying the checkin date of the booking\r",
							"pm.test(\"Bookingdates - Checkin\", function () {\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(pm.iterationData.get(\"updatecheckin\"))\r",
							"});\r",
							"\r",
							"//Verify the checkout date of the booking\r",
							"pm.test(\"Bookingdates - Checkout\", function () {\r",
							"  //  var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(pm.iterationData.get(\"updatecheckout\"))\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking}}/booking/{{bookingid}}",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Booking IDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"    var jsonData = pm.response.json();\r",
							"\r",
							"//Verify response status code\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Verify our booking ID exists in the all booking IDs\r",
							"pm.test(\"Booking Id\", function () {\r",
							"   bookingid = pm.globals.get('bookingid');\r",
							"   pm.response.json().hasOwnProperty(pm.globals.get('bookingid'))\r",
							"    \r",
							"});\r",
							"\r",
							"//Verify response header\r",
							"pm.test(\"Response header has content type\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Verify response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking}}/booking",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify response code\r",
							"pm.test(\"Response code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Verify response payload\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});\r",
							"\r",
							"//Verify Response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token={{token}}"
					}
				],
				"url": {
					"raw": "{{booking}}/booking/{{bookingid}}",
					"host": [
						"{{booking}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "HealthCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Verify response status code\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"//Verify response time\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"//Verify response payload\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Created\");\r",
							"});\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"Created\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{booking}}/ping",
					"host": [
						"{{booking}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"console.log(pm.environment.get(\"data\"))",
					"const parse = require('csv-parse/lib/sync')",
					"",
					"//Environmental variable where we copy-pasted the csv content",
					"const input =pm.environment.get(\"data\");",
					"",
					"const records = parse(input, {",
					"",
					" columns: true,",
					"",
					" skip_empty_lines: true",
					"",
					"})",
					"",
					"",
					"console.log(records)"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}